# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type City {
  id: Int!
  code: String!
  description: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Multimedia {
  id: Int!
  url: String!
  mimeType: String!
  publication: Publication!
  createdAt: DateTime!
}

type Publication {
  id: Int!
  description: String!
  comments: [Comment!]!
  multimedia: [Multimedia!]!
  user: User!
  createdAt: DateTime!
}

type Comment {
  id: Int!
  comment: String!
  publication_id: Int!
  publication: Publication!
  user: User!
  comment_id: Int!
  content: Comment!
  response: [Comment!]!
  createdAt: DateTime!
}

type Message {
  id: Int!
  content: String!
  see: Boolean!
  sender: User!
  chat: Chat!
  createdAt: DateTime!
}

type Chat {
  id: Int!
  user1: User!
  user2: User!
  message: [Message!]!
  createdAt: DateTime!
}

type Friend {
  id: Int!
  sender: User!
  recipient: User!
  accepted_date: DateTime!
  status: String!
  createdAt: DateTime!
}

type User {
  id: Int!
  email: String!
  password: String!
  name: String!
  profile_img: String!
  cover_img: String!
  biography: String!
  comments: [Comment!]!
  sender: [Friend!]!
  chatsAsUser1: [Chat!]!
  chatsAsUser2: [Chat!]!
  publications: [Publication!]!
  status: String!
  friend: Friend!
  sentMessages: [Message!]!
  createdAt: DateTime!
}

type TokenResponse {
  access_token: String!
  emailVerified: Boolean!
  registered: Boolean!
  user: User!
}

type Query {
  cities: [City!]!
  users: [User!]!
  userById: User!
  publications: [Publication!]!
  listMessages(chatId: Float!): [Message!]!
  listChats: [Message!]!
  listFriendsRequests: [Friend!]!
  listFriends: [Friend!]!
}

type Mutation {
  login(loginUserInput: LoginUserInput!): TokenResponse!
  register(registerUserInput: RegisterUserInput!): TokenResponse!
  createPublication(publication: CreatePublicationInput!): Publication!
  createChat(friendId: Float!): Chat!
  sendMessage(chatId: Float!, content: String!): Message!
  sendFriendRequest(id: Float!): Friend!
  acceptFriendRequest(id: Float!): Friend!
  rejectFriendRequest(id: Float!): Friend!
}

input LoginUserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  email: String!
  name: String!
  password: String!
  cover_img: String
  profile_img: String
}

input CreatePublicationInput {
  description: String!
}

type Subscription {
  watchMessages: Message!
}